{"pages":[{"title":"about","text":"About me","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"使用docker命令不需要sudo的方法","text":"安装完使用docker命令默认是需要sudo权限的，因为访问/var/run/docker.sock需要docker组的用户权限，那么把当前用户加入docker组就可以了。 1234sudo groupadd dockersudo gpasswd -a $&#123;USER&#125; dockersudo service docker restartnewgrp - docker","link":"/2018/10/15/docker-without-sudo.html"},{"title":"国内下载Android SDK方法","text":"国内下载Android SDK由于方某的科研成果导致无法下载。 配置方法 启动Android SDK Manager，打开Tool-&gt;Options找到Android SDK Manager Settings窗口。 在Android SDK Manager Settings窗口中，在Http Proxy Server和Http Proxy Port分辨输入mirrors.neusoft.edu.cn和80，并且选中Force Https://....sources to be fetched using http://....，设置完成后点击Close关闭Android SDK Manager Settings 窗口返回主界面。 然后你就发现，世界突然变得很美好了。PS:感谢东软提供的好东西。","link":"/2016/03/28/download-android-sdk.html"},{"title":"位运算在条件过滤中的应用","text":"比如有一些用户资源，需要根据用户的属性条件过滤，条件如下： 是否认证用户 用户手机平台 假设资源在MySQL中的存储表定义如下123id intresource varcharflag int 这儿flag是我定义的存储过滤条件的一个字段，对于条件值定义如下：12345678FLAG_AUTH_YES = 0x01; //认证用户FLAG_AUTH_NO = 0x02; //未认证用户FLAG_AUTH_ALL = 0x0F; //不限制FLAG_OS_ANDROID = 0x10; //AndroidFLAG_OS_IOS = 0x20; //iOSFLAG_OS_WP = 0x40; //WPFLAG_OS_ALL = 0xF0; //不限制 根据定义我们知道，flag使用四位来存储一个条件，那么一个条件最多可以支持四种不同的情况。 那么对于一条资源我们如何存储flag呢？作按位与运算 ： $flag = $auth | $os;假设$auth 是FLAG_AUTH_NO 对应的二进制就是0010，$os是FLAG_OS_IOS对应的二进制是0010 0000，那么进行按位或以后flag的值就是0010 0010，对应的十进制就是34。 在显示资源的列表的时候如何知道该资源的每个条件值呢？对于上面存入的资源，我们可以使用掩码运算，对于os作按位与运算$os = flag &amp; FLAG_OS_ALL，这样我们就可以得到0010 0000也就是FLAG_OS_IOS。 对于查询如何使用条件过滤比如我要查询iOS系统且认证的用户对应的资源。1$os = FLAG_OS_IOS; $auth = FLAG_AUTH_YES 首先我们根据条件做按位或运算得到查询flag的过滤条件$flag = $os | $auth然后在sql中过滤1select * from resource where flag &amp; $flag = $flag 这样就可以精确匹配到对应的资源。 又添加了别的条件怎么办？假如又需要添加一个用户是否充值作为条件，我们定义常量如下：123FLAG_RECHARGED_YES = 0x100; //充值用户FLAG_RECHARGED_NO = 0x200; //未充值用户FLAG_RECHARGED_ALL = 0xF00; //不限制 那么我们存flag的时候再多加一次按位或就可以了，这儿注意的是条件的个数，flag不要溢出，要存储更多的条件就需要更大位数的整数。","link":"/2016/03/18/filter_by_bit_operate.html"},{"title":"数据库事务隔离级别","text":"数据库的事务隔离级别从低到高有Read Uncommitted、Read Committed、Repeatable Read、Serialization Read Uncommitted 未提交读RU级别，事务中的修改即使没有提交，对别的事务也是可见的，别的事务可以读取未提交的数据，就会造成脏读，实际应用中很少用。 eg. 脏读：小明今天发工资，公司财务把1w块钱打到小明的卡上，这时候并未提交事务，小明一查1w块，怎么比平时多了2000，很开始，后来财务发现这个问题，又撤销了事务，小明最后卡里没得到钱，白开心一场。 Read Committed 提交读RC级别，只有事务提交的数据才对其他的事务可见，但是一个事务在处理过程中如果多次执行相同条件的查询的话可能读到不同的数据，因为在执行完第一次查询以后可能会有其他事务修改了数据，这称之为不可重复读。RC解决了脏读的问题，大多数的数据库采用的默认级别都是RC。 eg. 不可重复读：小明刚发了工资8000块，拿着工资卡去给老婆买礼物，2000元的衣服，刷卡的时候系统检测到小明的卡里有8000，这时候小明的老婆在网上偷偷把8000转到了余额宝，最后从小明卡里扣钱的时候提示扣款失败，小明就很郁闷明明有钱，这就是不可重复读的问题。 Repeatable Read 重复读RR级别，在一个事务读取数据的时候，禁止别的事务修改上一个事务读取的数据，可以保证在同一个事务中多次读取数据的结果是一样的，虽然解决了不可重复读的问题，但是理论上还是会有幻读的问题，MySQL的InnoDB存储引擎通过多版本并发控制解决了幻读的问题。MySQL的默认级别是RR。 eg. 幻读：比如小明在网上查看当月消费账单，显示1000元，这时候小明家的败家娘们在商场又刷了一单1000，并且事务提交了，小明点了打印账单发现竟然是2000。 Serializable 可串行化S级是最高的隔离级别，通过强制的串行执行事务，但是会导致大量的超时和争锁的问题。实际中也很少使用。 总结 级别 脏读 不可重复读 幻读 RU Y Y Y RC N Y Y RR N N Y S N N N","link":"/2016/03/23/mysql_transcation_isolation_level.html"},{"title":"PHP常用编译选项说明","text":"编译选项针对PHP的编译选项，可以参考PHP源码下面的configure文件，里面有详细的分类，下面挑选常用的选项作说明。 在一个源代码下面如果有configure文件的话，可以使用configure --help查看编译选项。 编译选项说明 –prefix=/usr/local/php 指定php安装的路径 –with-config-file-path=xxx 指定php.ini文件的路径 –with-mysql=[DIR] DIR为MySQL安装根目录，添加MySQL支持 –with-mysql-sock 定位mysql的unix 套接字指针。如未指定，则按默认位置搜索 –with-mysqli=FILE 添加MySQLi支持，FILE是mysql_config文件的路径 –with-gd=[DIR] 添加GD库支持，DIR是GD库的根目录 –with-vpx-dir=DIR GD相关 libvpx安装目录 –with-jpeg-dir=DIR GD相关 libjpeg安装目录 –with-png-dir=DIR GD相关 libpng安装目录 –with-zlib-dir=DIR GD相关 libz安装目路 –with-xpm-dir=DIR GD相关 libXpm安装目录 –with-freetype-dir=DIR GD相关 FreeType 2安装目录 –disable-rpath 禁用传递其他的运行时库搜索路径 –enable-safe-mode 启用默认的安全模式 –enable-fpm 启用php-fpm组件 –with-mcrypt=DIR 添加mcrypt支持，DIR为libmcrypt安装路径 –with-zlib 设置zlib的安装目录 –enable-mbstring 启用多字节字符串的支持 –with-openssl 启用openssl支持 –enable-pdo 添加pdo扩展支持 –with-pdo-mysql=[DIR] 添加对mysql的pdo支持，DIR为mysql的安装目录 –with-curl 添加curl扩展支持 –enable-sockets 启用Sockets支持 –enable-zip 启用zip支持","link":"/2015/09/07/php-compile-configure-options.html"}],"tags":[{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"Android","slug":"Android","link":"/tags/Android/"},{"name":"algorithm","slug":"algorithm","link":"/tags/algorithm/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"}],"categories":[{"name":"docker","slug":"docker","link":"/categories/docker/"},{"name":"note","slug":"note","link":"/categories/note/"},{"name":"algorithm","slug":"algorithm","link":"/categories/algorithm/"},{"name":"php","slug":"php","link":"/categories/php/"}]}